# Apri il tuo terminale e naviga nella directory dove vuoi creare il repository.
cd /percorso/cartella

# Crea un nuovo repository Git.
git init

# (Opzionale) Aggiungi un file README.md.
echo "# Il mio progetto" > README.md

# Aggiungi i file al tuo repository Git.
git add README.md

# Committa i file con un messaggio di commit.
git commit -m "Inizializzazione del progetto"


# Crea nuovi file o modifica quelli esistenti.

# Aggiungi i nuovi file al repository Git.
git add file1 file2

# Committa le modifiche con un messaggio di commit.
git commit -m "Aggiunti nuovi file"

3. Pushare il repository su GitHub:

3.1 Crea un repository vuoto su GitHub:

Accedi al tuo account GitHub.
Clicca su "Nuovo repository".
Inserisci il nome del repository e una descrizione (opzionale).
Seleziona "Pubblico" o "Privato".
Clicca su "Crea repository".
3.2 Associa il tuo repository locale a quello remoto su GitHub:

# Imposta il tuo repository remoto.
git remote add origin https://github.com/utente/repo.git

# Push delle modifiche al repository remoto.
git push origin master
Note:

Sostituisci "utente" con il tuo nome utente GitHub e "repo" con il nome del tuo repository.
Assicurati di essere nella branch "master" prima di eseguire il push.
Se hai già un repository remoto, puoi clonarlo localmente con il comando git clone.
Suggerimenti:

Usa un'interfaccia grafica come GitKraken o SourceTree per rendere Git più facile da usare.
Segui i tutorial online per imparare nuove funzionalità di Git.

### visualizzare il grafo della tua repository
git log --oneline --graph


# per vedere quali branches sono presenti sulla cartella di proggetto distinguendoli tra local e remote 
git branch -a

# per creare un branch chiamato feature1
git branch feature1

#  checkout: aggiorna la head reference (punto attuale di utilizzo del progetto)
#  e aggiorna il working tree con i file dei commit

#  quindi se voglio switch sul branch appena creato uso, se poi eseguo git branch -a troverò la stessa lista di prima ma con l'asterisco sul branch appena creato (segno che sto lavorando su quel branch)
git checkout nomebranch 

# per combinare lo step di creazione del branch e lo switch sullo stesso esiste una opzione che fa 2 cose in una linea di comando. L'opzione -b funziona solo se il branch non era già esitente (quindi da errore se il nome del branch utilizzato esiste già). Sposta anche la head nel nuovo branch creato
git checkout -b feature2


#  per cancellare un branch esiste l'opzione -d. È l'opzione più sicura da usare, in quanto evita di eliminare accidentalmente branch necessari.

# usando l'opzione -D su un branch non mergiato, si cancella il branch, il commit di uel branch rimane appeso fino alla sua cancellazione (garbage collecting fatto da git)
git branch -d feature1

#  annullare una cancellazione di un branch usando git reflog

<<<<<<< HEAD
git merge 
=======
 #  per mergiare un branch a cui si ha lavorato aggiornado un file bisogna:
 # 1 committare il lavoro svolto dil branch (in questo caso fare git add file e git commit)
 # 2 switcciare sul master 
 git checkout master
 git merge feature1
>>>>>>> feature1
